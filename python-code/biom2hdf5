#!/usr/bin/env python
from __future__ import division

__author__ = "Jai Ram Rideout"
__copyright__ = "Copyright 2013, BIOM-Format Project"
__credits__ = ["Jai Ram Rideout"]
__license__ = "GPL"
__url__ = "http://biom-format.org"
__version__ = "1.2.0-dev"
__maintainer__ = "Jai Ram Rideout"
__email__ = "jai.rideout@gmail.com"

import sys
import h5py
import numpy

def parse_field(table_str, field):
    search_str = '"%s": "' % field
    start_idx = table_str.index(search_str) + len(search_str)
    end_idx = table_str.index('",', start_idx)
    return table_str[start_idx:end_idx]

def parse_shape(table_str):
    search_str = '"shape": ['
    start_idx = table_str.index(search_str) + len(search_str)
    end_idx = table_str.index('],', start_idx)
    dim_strs = table_str[start_idx:end_idx].split(', ')
    assert len(dim_strs) == 2
    return tuple(map(int, dim_strs))

def parse_data_row(table_str, shape):
    search_str = '"data": [['
    start_idx = table_str.index(search_str) + len(search_str)

    current_row_idx = 0
    eof = False
    while current_row_idx < shape[0]:
        current_row_data = numpy.zeros(shape[1])

        while not eof:
            end_idx = table_str.index(']', start_idx)
            data_strs = table_str[start_idx:end_idx].split(',')
            #assert len(data_strs) == 3
            row_idx, col_idx, data = int(data_strs[0]), int(data_strs[1]), float(data_strs[2])

            if row_idx == current_row_idx:
                current_row_data[col_idx] = data

                if table_str[end_idx + 1] == ',':
                    start_idx = end_idx + 3
                else:
                    eof = True
            else:
                break

        yield current_row_data
        current_row_idx += 1

def parse_data(table_str):
    search_str = '"data": [['
    start_idx = table_str.index(search_str) + len(search_str)

    while True:
        end_idx = table_str.index(']', start_idx)
        data_strs = table_str[start_idx:end_idx].split(',')
        assert len(data_strs) == 3
        yield int(data_strs[0]), int(data_strs[1]), float(data_strs[2])

        if table_str[end_idx + 1] == ',':
            start_idx = end_idx + 3
        else:
            break

in_fp, out_fp = sys.argv[1:]
in_f = open(in_fp, 'U')
table_str = in_f.read()
in_f.close()

table_id = parse_field(table_str, 'id')
version = parse_field(table_str, 'format')
url = parse_field(table_str, 'format_url')
table_type = parse_field(table_str, 'type')
generated_by = parse_field(table_str, 'generated_by')
date = parse_field(table_str, 'date')
matrix_type = parse_field(table_str, 'matrix_type')
matrix_element_type = parse_field(table_str, 'matrix_element_type')
shape = parse_shape(table_str)
data = parse_data(table_str)

print table_id
print version
print url
print table_type
print generated_by
print date
print matrix_type
print matrix_element_type
print shape

print "Creating HDF5 file"
out_f = h5py.File(out_fp, 'w')
print "Done creating HDF5 file"

print "Creating dataset"
dset = out_f.create_dataset('data', shape, dtype=matrix_element_type,
                            compression='gzip')
#dset = out_f.create_dataset('data', shape, dtype=matrix_element_type)
print "Done creating dataset"

count = 0
for e in data:
    dset[e[0], e[1]] = e[2]
    count += 1

    if (count % 100000) == 0:
        print "flushing, NNZ processed: %d" % count
        out_f.flush()
        print "done flushing"

print
print dset[0, 0]
print dset[0, 1]
print dset[999, 999]

#row_idx = 0
#for row in data:
#    #dset[e[0], e[1]] = e[2]
#    dset[row_idx] = row
#    row_idx += 1
#
#    if (row_idx % 10000) == 0:
#        print "flushing, row %d" % row_idx
#        out_f.flush()
#        print "done flushing"

# 107,439,386
#print "NNZ: %d" % count

#print
#print dset[0, 0]
#print dset[0, 1]
#print dset[5594412, 15480]

out_f.close()
